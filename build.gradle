plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = 'dev'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompile "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:2.5.1"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:2.5.1"
    // Adds an implementation dependency on the entity module

    /*
    modCompile "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:2.4.0"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:2.4.0"
    modCompile "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:2.4.0"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:2.4.0"
    modCompile "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:2.4.0"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:2.4.0"
    */
    modCompile("com.github.vini2003:spinnery:${project.spinnery_version}"){
        exclude module:"fabric-api"
    }
    include("com.github.vini2003:spinnery:${project.spinnery_version}"){
        exclude module:"fabric-api"
    }
    modImplementation("io.github.prospector:modmenu:${project.modmenu_version}"){
        exclude module:"fabric-api"
    }
    include("io.github.prospector:modmenu:${project.modmenu_version}"){
        exclude module:"fabric-api"
    }
    modImplementation("vazkii.patchouli:Patchouli:${project.patchouli_version}"){
        exclude module:"fabric-api"
    }
    //modRuntime ("com.github.Chocohead:Data-Breaker-Lower:24be1a2")

    /* this will expose the dependency to anyone building against your mod. You might
     want to set this to modImplementation for production */
    //modApi  "io.github.cottonmc:cotton-resources:${project.cotton_resources_version}"
    /* this will package cotton-resources in your jar. skip if you don't want this */
    //include "io.github.cottonmc:cotton-resources:${project.cotton_resources_version}"
    implementation 'com.google.code.gson:gson:2.8.6'
}
repositories {
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
    maven {
        name = "Spinnery"
        url  "https://dl.bintray.com/spinnery/Spinnery"
    }
    maven {
        name = "Cotton"
        url = "https://server.bbkr.space/artifactory/libs-release/"
    }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Jared"
        url = "https://maven.blamejared.com"
    }
}
configurations {
    if (getVersion() == 'dev') {
        println "You are in development mode !"
        jar.archiveName = 'herbocraft.jar'
    } else {
        jar.archiveName = 'herbocraft-' + getVersion() + ".jar"
    }
}
processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    //noinspection GrDeprecatedAPIUsage
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

curseforge {
    println "Publishing project..."
    def envApiKey = System.getenv('CURSEFORGE_API_KEY')
    def envChangeLog = System.getenv('CHANGELOG')
    if (envApiKey == null || envChangeLog == null) {
        println 'Unable to locate api key or changelog in env variable'
        return
    }
    def versionReleaseType = "release"
    if (version.toString().toLowerCase().contains("beta")) {
        versionReleaseType = "beta"
    } else if (version.toString().toLowerCase().contains("alpha")) {
        versionReleaseType = "alpha"
    }

    project {
        apiKey = envApiKey
        id = '390001'
        changelog = envChangeLog
        changelogType = "markdown"
        releaseType = versionReleaseType
        addGameVersion "1.16.1"

        relations {
            requiredDependency 'fabric-api'
        }
        afterEvaluate {
            mainArtifact(remapJar)
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }

}
